{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","name","id","style","padding","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchromanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleshow","window","addEventListener","scrollY","removeEventListener","App","fetchRomanceMovies","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1a77463.chunk.js","sourcesContent":["import axios from \"axios\";\n/** base url to make a requestes to the movie database */\nconst instance =axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n\n    async function fetchData() {\n\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0,\n    }\n  }\n\n  const handleClick = (movie) => {\n    // console.table(movie?.title)\n    if (trailerUrl) {\n      setTrailerUrl('')\n    } else {\n      movieTrailer(movie?.title || \"\")\n        .then(url => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n        }).catch((error) => console.log(error));\n    }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map(movie => {\n          return <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n            alt={movie.name} />\n        })}\n      </div>\n      <div style={{ padding: \"40px\" }}>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;","const API_KEY=\"f415735df62fe69414b23bd1f2a7e445\";\n\nconst requests={\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-us`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-us`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchromanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n\n}\nexport default requests;","import React, { useState, useEffect } from 'react'\nimport axios from './axios';\nimport requests from './requests';\nimport \"./Banner.css\"\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n\n    async function fetchData() {\n\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(\n        request.data.results[\n        Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      // Math.floor(Math.random() * request.data.results.length -1)\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  // console.log(movie)\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        backgroundImage: `url(\n        \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n        )`,\n        backgroundPosition: \"center center\"\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n\n      <div className=\"banner--fadeBottom\" />\n    </header>\n\n  )\n}\n\nexport default Banner","import React, { useState, useEffect } from 'react';\nimport \"./Nav.css\";\n\nfunction Nav() {\n  const [show, handleshow] = useState(false)\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleshow(true)\n      } else handleshow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\")\n    }\n  }, []);\n\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/250px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav_avatar\"\n        src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\n        alt=\"Netflix Logo\"\n      />\n    </div>\n  )\n}\n\nexport default Nav","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Nav />\n\t\t\t<Banner />\n\t\t\t<Row title=\"NETFLIX ORIGINALS\" isLargeRow fetchUrl={requests.fetchNetflixOriginals} />\n\t\t\t<Row title=\"Trending\" fetchUrl={requests.fetchTrending} />\n\t\t\t<Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n\t\t\t<Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n\t\t\t<Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n\t\t\t<Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n\t\t\t<Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n\t\t\t<Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\t\t</div>\n\t);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}